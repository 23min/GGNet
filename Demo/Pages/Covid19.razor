@page "/covid19"
@inject HttpClient Http

@using System.Text.Json
@using NodaTime
@using NodaTime.Serialization.SystemTextJson
@using GGNet

<h3>Covid19: @country</h3>

@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <GGNet.Components.Plot Data=@map T="TS" TX="Double" TY="Double" Width="720" Height="360" />

    <div class="border rounded-lg m-5 p-1" style="width: 720px;">
        <div style="visibility: @(clicked ? "visible" : "hidden")">
            <GGNet.Components.Plot Data=@ts T="StatPoint" TX="LocalDate" TY="Double" @ref="plot" />
        </div>
    </div>
}

@code {

    private TS[] data;

    Data<TS, double, double> map;

    Source<StatPoint> source = new GGNet.Source<StatPoint>();
    Data<StatPoint, LocalDate, double> ts;
    GGNet.Components.Plot<StatPoint, LocalDate, double> plot;

    string country;
    bool clicked = false;

    protected override async Task OnInitializedAsync()
    {
        var json = await Http.GetStringAsync("https://gist.githubusercontent.com/pablofrommars/fe23999f2b857fcf0ed4b854f6d5316f/raw/44727f3f99fe9758b81ac52a029ad7d2881137fe/covid19.json");
        var options = (new JsonSerializerOptions()).ConfigureForNodaTime(DateTimeZoneProviders.Tzdb);
        data = JsonSerializer.Deserialize<TS[]>(json, options);

        var theme = Theme.Default(dark: false);

        theme.Panel.Grid.Major.X.Alpha = 0.25;
        theme.Panel.Grid.Minor.X.Alpha = 0.25;
        theme.Panel.Grid.Major.Y.Alpha = 0.25;
        theme.Panel.Grid.Minor.Y.Alpha = 0.25;

        theme.Animation.Point.Scale = 1.5;

        var capitals = new GGNet.Source<TS>(data);

        map = Plot.New(capitals, o => o.Position.Value.Long, y: o => o.Position.Value.Lat)
            .Geom_Map(GGNet.Datasets.Coastline.Load(), o => o.Latitude, o => o.Longitude, fill: "grey", alpha: 0.1)
            .Geom_Point(onclick: OnClick, color: "#000000", alpha: 0.5, animation: true)
            .Scale_X_Continuous(limits: (-180, 180), expand: (0, 0, 0, 0), formatter: GGNet.Formats.Latitude.Instance)
            .Scale_Y_Continuous(limits: (-90, 90), expand: (0, 0, 0, 0), formatter: GGNet.Formats.Longitude.Instance)
            .Scale_Color_Discrete(o => o.Continent.Value, Colors.Viridis, guide: false)
            .Scale_Size_Continuous(o => o.Points.Last().Confirmed, range: (1, 10), guide: false)
            .Theme(theme);

        ts = Plot.New(source, o => o.Date, o => o.Value)
            .Geom_Line(tooltip: o => $"<b>{o.Date.ToString()}<b><br/>{o.Stat}: {o.Value:#,##0}", width: 2)
            .Scale_Color_Discrete(o => o.Stat, Colors.Ipsum, guide: true)
            .Title(" ")
            .Theme(dark: false, legend: GGNet.Position.Bottom);
    }

    public Task OnClick(TS point, MouseEventArgs e)
    {
        clicked = true;
        country = point.Country;

        source.Clear();

        foreach (var p in point.Points)
        {
            source.Add(new StatPoint
            {
                Stat = Stat.Confirmed,
                Date = p.Date,
                Value = p.Confirmed
            });

            source.Add(new StatPoint
            {
                Stat = Stat.Deaths,
                Date = p.Date,
                Value = p.Deaths
            });

            source.Add(new StatPoint
            {
                Stat = Stat.Recovered,
                Date = p.Date,
                Value = p.Recovered
            });
        }

        ts.Title(country);

        ts.Render(false);
        plot.Render();

        StateHasChanged();

        return Task.CompletedTask;
    }

    public class Option<T>
    {
        public T Value { get; set; }
    }

    public class Position
    {
        public double Lat { get; set; }
        public double Long { get; set; }
    }

    public class Point
    {
        public LocalDate Date { get; set; }

        public double Confirmed { get; set; }
        public double Deaths { get; set; }
        public double Recovered { get; set; }
    }

    public class TS
    {
        public string Country { get; set; }

        public Option<string> Continent { get; set; }

        public Option<Position> Position { get; set; }

        public Point[] Points { get; set; }

    }

    public enum Stat
    {
        Confirmed,
        Deaths,
        Recovered
    }

    public class StatPoint
    {
        public Stat Stat { get; set; }

        public LocalDate Date { get; set; }

        public double Value { get; set; }
    }
}
