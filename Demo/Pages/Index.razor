@page "/"

@using GGNet
@using GGNet.Formats
@using GGNet.Datasets

<div class="border rounded-lg m-5 p-1" style="width: 720px; height: 670px;">
    <GGNet.Components.Plot Data=@map T=Point TX=Double TY=Double Width=720 Height=670 />
</div>

<div class="border rounded-lg m-5 p-1" style="width: 720px;">
    <GGNet.Components.Plot Data=@diamond T=Diamond.Point TX=Double TY=Double />
</div>

<div class="border rounded-lg m-5 p-1" style="width: 720px; background-color: #263238;">
    <GGNet.Components.Plot Data=@tip T=Tip.Point TX=Tip.Day TY=Double />
</div>

<div class="border rounded-lg m-5 p-1" style="width: 720px;">
    <GGNet.Components.Plot Data=@gapminder T=GapMinder.Point TX=Double TY=Double />
</div>

<div class="border rounded-lg m-5 p-1" style="width: 720px;">
    <GGNet.Components.Plot Data=@beatles T=Beatles.Point TX=Double TY=Double />
</div>

<div class="border rounded-lg m-5 p-1" style="width: 720px;">
    <GGNet.Components.Plot Data=@weapon T=Weapon.Point TX=Double TY=Double />
</div>

<div class="border rounded-lg m-5 p-1" style="width: 720px; background-color: #263238;">
    <GGNet.Components.Plot Data=@log10 T=Point2 TX=Double TY=Double />
</div>

<div class="border rounded-lg m-5 p-1" style="width: 720px; background-color: #263238;">
    <GGNet.Components.Plot Data=@sqrt T=Point2 TX=Double TY=Double />
</div>

@code {

    Data<Point, double, double> map;
    Data<Diamond.Point, double, double> diamond;
    Data<Tip.Point, Tip.Day, double> tip;
    Data<GapMinder.Point, double, double> gapminder;
    Data<Beatles.Point, double, double> beatles;
    Data<Weapon.Point, double, double> weapon;
    Data<Point2, double, double> log10;
    Data<Point2, double, double> sqrt;

    protected override void OnInitialized()
    {
        {
            var population = GapMinder.Load().Where(o => o.continent == GapMinder.Continent.Europe);
            var world = World.Load();

            var data = population.Join(world, o => o.country, o => o.Region, (x, y) => new Point
            {
                Name = x.country,
                Pop = x.pop,
                Longitude = y.Longitude,
                Latitude = y.Latitude
            });

            map = Plot.New(data)
                .Geom_Map(latitude: o => o.Latitude, longitude: o => o.Longitude, alpha: 0.7, width: 0.2, animation: true)
                .Scale_X_Continuous(limits: (-15, 30), formatter: GGNet.Formats.Latitude.Instance)
                .Scale_Y_Continuous(limits: (30, 70), formatter: GGNet.Formats.Longitude.Instance)
                .Scale_Fill_Continuous(o => o.Pop / 1000000, Colors.Brewer.Blues[9], name: "Population (M)")
                .Theme(dark: false, legend: Position.Top);
        }

        {
            diamond = Plot.New(Diamond.Load(), x: o => o.Carat, y: o => o.Price)
                .Geom_Hex(dx: o => o.Dx, dy: o => o.Dy)
                .Title("Prices of 50,000 round cut diamonds")
                .XLab("Carat")
                .YLab("Price($)")
                .Scale_Fill_Continuous(o => o.Count, Colors.Viridis, m: 10, name: "Count")
                .Theme(dark: false);
        }

        {
            var theme = Theme.Default();

            theme.Plot.Background.Fill = "#263238";
            theme.Panel.Background.Fill = "#32464a";
            theme.Axis.Text.X.Color = "#FFFFFF";
            theme.Axis.Title.X.Color = "#FFFFFF";
            theme.Axis.Text.Y.Color = "#FFFFFF";
            theme.Axis.Title.Y.Color = "#FFFFFF";
            theme.Panel.Grid.Major.X.Fill = "#263238";
            theme.Panel.Grid.Minor.X.Fill = "#263238";
            theme.Legend.Title.Color = "#FFFFFF";
            theme.Legend.Labels.Color = "#FFFFFF";

            tip = Plot.New(Tip.Load(), o => o.Day, o => o.Avg)
                .Geom_ErrorBar(ymin: o => o.Lower, ymax: o => o.Upper, position: PositionAdjustment.Dodge)
                .Scale_Color_Discrete(o => o.Sex, new[] { "#69b3a2", "#404080" })
                .Title("Tipping Behavior")
                .YLab("Tip (%)")
                .Theme(theme);
        }

        {
            var text = new GGNet.Source<GapMinder.Point>(GapMinder.Load().Where(o => (o.gdpPercap > 5000 && o.lifeExp < 60) || o.lifeExp < 30 || o.gdpPercap > 40000));

            var tooltip =
@"
<div class=""border rounded"" style=""padding: 5px 10px;"">
    <div class=""text-center font-weight-bold border-bottom"" style=""color: var(--tooltip-color);"">Country</div>
    <div class=""text-nowrap"">
        <div class=""d-inline-block""><div class=""text-center"">Confirmed</div><div class=""text-center font-weight-bold"" style=""color: rgba(209, 137, 117, 1)""><span style=""opacity: 1;"">100</span></div></div>
        <div class=""d-inline-block""><div class=""text-center"">Deaths</div><div class=""text-center font-weight-bold"" style=""color: rgba(45, 84, 61, 1)""><span style=""opacity: 1;"">100</span></div></div>
        <div class=""d-inline-block""><div class=""text-center"">Recovered</div><div class=""text-center font-weight-bold"" style=""color: rgba(117, 139, 209, 1)""><span style=""opacity: 1;"">100</span></div></div>
    </div>
</div>
";
            var theme = Theme.Default(dark: false);
            theme.Tooltip.Margin = new GGNet.Elements.Margin();
            theme.Tooltip.Background = "#FFFFFF";
            theme.Tooltip.Alpha = 1.0;
            theme.Tooltip.Text.Color = "#000000";

            gapminder = Plot.New(GapMinder.Load(), x: o => o.gdpPercap, y: o => o.lifeExp)
                .Title("Gap Minder")
                .Geom_Point(tooltip: o => tooltip, color: "#000000", alpha: 0.7, animation: true)
                .Geom_Text(text, x: o => o.gdpPercap, y: o => o.lifeExp, text: o => o.country)
                .XLab("GDP/Capita")
                .Scale_Color_Discrete(o => o.continent, Colors.Viridis, name: "Continent")
                .Scale_Size_Continuous(o => o.pop / 1000000, range: (1.86, 25.4), name: "Population(M)")
                .YLab("Life Expectancy")
                .Caption("Source: https://www.gapminder.org")
                .Theme(theme);
        }

        {
            var source = new Source<Beatles.Point>(Beatles.Load()
                           .Where(o => o.Year == 2010 || o.Year == 1970 || o.Year == 1930)
                           .OrderBy(o => o.Year)
                           .ThenBy(o => o.Name));

            double X(Beatles.Point p) => p.Year switch
            {
                1930 => 1.0,
                1970 => 2.0,
                2010 => 3.0,
                _ => throw new ArgumentException()
            };

            var labeller = new Labeller<double>
            {
                [1.0] = "1930",
                [2.0] = "1970",
                [3.0] = "2010"
            };

            beatles = Plot.New(source, x: X, y: o => o.N)
                 .Geom_Bar(tooltip: o => $"<b>{o.Name}:</b> {o.N}", position: PositionAdjustment.Stack, width: 0.5, alpha: 0.7)
                 .Scale_X_Discrete(expand: (0.0, 0.1, 0, 0.1), formatter: labeller)
                 .Scale_Fill_Discrete(o => o.Name, Colors.Brewer.YlGnBu[4], direction: -1)
                 .YLab("#")
                 .XLab("Year")
                 .Theme(dark: false);
        }
        {
            var n = 15;

            var data = Weapon.Load()
                .OrderByDescending(o => o.Value)
                .Take(n)
                .Select((o, i) => new Weapon.Point
                {
                    Id = n - i,
                    Country = o.Country,
                    Value = o.Value
                })
                .OrderBy(o => o.Id)
                .ToList();

            var labeller = new Labeller<double>(data.ToDictionary(o => (double)o.Id, o => o.Country));

            var source = new Source<Weapon.Point>(data);

            weapon = Plot.New(source, o => o.Value, o => o.Id)
                .Geom_Bar(tooltip: o => $"{o.Value}", fill: "#69b3a2", alpha: 0.7)
                .Scale_Y_Discrete(expand: (0.0, 0.1, 0, 0.1), formatter: labeller)
                .Flip()
                .XLab("Weapon Quantity")
                .Caption("SIPRI trend-indicator value")
                .Theme(dark: false);
        }

        {
            var source = new Point2[5];

            for (var i = 0; i < 5; i++)
            {
                source[i] = new Point2
                { 
                    X = i + 1, 
                    Y = System.Math.Pow(i + 1.0, 10)
                };
            }

            /*
            var source = new[] {
                new Point2 { X = 1, Y = 300.005 },
                new Point2 { X = 2, Y = 8420.1 }
            };
            */

            log10 = Plot.New(source, o => o.X, o => o.Y)
                .Geom_Point()
                .Scale_Y_Log10()
                .Theme();
        }

        {
            var source = new Point2[5];

            for (var i = 0; i < 5; i++)
            {
                source[i] = new Point2 { X = i, Y = i * i };
            }

            sqrt = Plot.New(source, o => o.X, o => o.Y)
                .Geom_Point()
                .Scale_Y_Sqrt()
                .Theme();
        }
    }

    public class Point
    {
        public string Name { get; set; }

        public double Pop { get; set; }

        public double[] Latitude { get; set; }

        public double[] Longitude { get; set; }
    }

    public class Point2
    {
        public double X { get; set; }
        public double Y { get; set; }
    }
}
