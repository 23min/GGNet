@typeparam T
@typeparam TX
@typeparam TY

@using GGNet.Shapes

@for (var g = 0; g < Data.Geoms.Count; g++)
{
    var geom = Data.Geoms[g];

    for (var i = 0; i < geom.Layer.Count; i++)
    {
        var shape = geom.Layer[i];

        if (shape is Shapes.Line l)
        {
            <line x1=@Coord.CoordX(l.X1)
                  y1=@Coord.CoordY(l.Y1)
                  x2=@Coord.CoordX(l.X2)
                  y2=@Coord.CoordY(l.Y2)
                  class=@l.Css()
                  style="stroke-width: @l.Aesthetic.Width; stroke: @l.Aesthetic.Fill; stroke-opacity: @l.Aesthetic.Alpha; stroke-dasharray: @(l.Aesthetic.LineType.DashArray());"
                  clip-path="url(#@(Clip))"
                  @onclick=@(async e => await l.OnClickHandler(e))
                  @onmouseover=@(async e => await l.OnMouseOverHandler(e))
                  @onmouseout=@(async e => await l.OnMouseOutHandler(e)) />
        }
        else if (shape is Shapes.Rectangle r)
        {
            var x = Coord.CoordX(r.X);
            var y = Coord.CoordY(r.Y + r.Height);
            var width = Coord.CoordX(r.X + r.Width) - x;
            var height = Coord.CoordY(r.Y) - y;

            <rect x=@x
                  y=@y
                  width=@width
                  height=@height
                  class="@r.Css()"
                  style="fill: @r.Aesthetic.Fill; fill-opacity: @r.Aesthetic.Alpha;"
                  clip-path="url(#@(Clip))"
                  @onclick=@(async e => await r.OnClickHandler(e))
                  @onmouseover=@(async e => await r.OnMouseOverHandler(e))
                  @onmouseout=@(async e => await r.OnMouseOutHandler(e)) />
        }
        else if (shape is Shapes.Circle c)
        {
            <g style="transform: translate(@Coord.CoordX(c.X)px, @Coord.CoordY(c.Y)px)">
                <circle cx="0"
                        cy="0"
                        r=@c.Aesthetic.Radius
                        class=@c.Css()
                        style="stroke-width: 0.71; stroke: @c.Aesthetic.Fill; stroke-opacity: @c.Aesthetic.Alpha; fill: @c.Aesthetic.Fill; fill-opacity: @c.Aesthetic.Alpha;"
                        @onclick=@(async e => await c.OnClickHandler(e))
                        @onmouseover=@(async e => await c.OnMouseOverHandler(e))
                        @onmouseout=@(async e => await c.OnMouseOutHandler(e)) />
            </g>
        }
        else if (shape is Shapes.VStrip v)
        {
            var x = Coord.CoordX(v.X);
            var width = Coord.CoordY(v.X + v.Width) - x;

            <rect x=@x
                  y=@Zone.Y
                  width=@width
                  height=@Zone.Height
                  style="fill: transparent"
                  clip-path="url(#@(Clip))"
                  @onclick=@(async e => await v.OnClickHandler(e))
                  @onmouseover=@(async e => await v.OnMouseOverHandler(e))
                  @onmouseout=@(async e => await v.OnMouseOutHandler(e)) />
        }
        else if (shape is Shapes.Path p)
        {
            if (p.Points.Count > 0)
            {
                sb.Clear();

                var (x, y) = p.Points[0];

                sb.Append("M ");
                sb.Append(Coord.CoordX(x));
                sb.Append(" ");
                sb.Append(Coord.CoordY(y));

                for (var j = 1; j < p.Points.Count; j++)
                {
                    (x, y) = p.Points[j];

                    sb.Append(" L ");
                    sb.Append(Coord.CoordX(x));
                    sb.Append(" ");
                    sb.Append(Coord.CoordY(y));
                }

                <path d=@sb.ToString()
                      style="stroke-width: @p.Aesthetic.Width; stroke: @p.Aesthetic.Fill; stroke-opacity: @p.Aesthetic.Alpha; stroke-dasharray: @(p.Aesthetic.LineType.DashArray());"
                      clip-path="url(#@(Clip))" />
            }
        }
        else if (shape is Shapes.Area a)
        {
            if (a.Points.Count > 0)
            {
                sb.Clear();

                var (x, ymin, ymax) = a.Points[0];

                sb.Append("M ");
                sb.Append(Coord.CoordX(x));
                sb.Append(" ");
                sb.Append(Coord.CoordY(ymax));

                for (var j = 1; j < a.Points.Count; j++)
                {
                    (x, ymin, ymax) = a.Points[j];

                    sb.Append(" L ");
                    sb.Append(Coord.CoordX(x));
                    sb.Append(" ");
                    sb.Append(Coord.CoordY(ymax));
                }

                for (var j = 0; j < a.Points.Count; j++)
                {
                    (x, ymin, ymax) = a.Points[a.Points.Count - j - 1];

                    sb.Append(" L ");
                    sb.Append(Coord.CoordX(x));
                    sb.Append(" ");
                    sb.Append(Coord.CoordY(ymin));
                }

                sb.Append(" Z");

                <path d=@sb.ToString()
                      style="fill: @a.Aesthetic.Fill; fill-opacity: @a.Aesthetic.Alpha;"
                      clip-path="url(#@(Clip))" />
            }
        }
        else if (shape is Shapes.Polygon poly)
        {
            if (poly.Points.Count > 0)
            {
                sb.Clear();

                var (x, y) = poly.Points[0];

                sb.Append("M ");
                sb.Append(Coord.CoordX(x));
                sb.Append(" ");
                sb.Append(Coord.CoordY(y));

                for (var j = 1; j < poly.Points.Count; j++)
                {
                    (x, y) = poly.Points[j];

                    sb.Append(" L ");
                    sb.Append(Coord.CoordX(x));
                    sb.Append(" ");
                    sb.Append(Coord.CoordY(y));
                }

                sb.Append(" Z");

                <path d=@sb.ToString()
                      style="fill: @poly.Aesthetic.Fill; fill-opacity: @poly.Aesthetic.Alpha; stroke: @poly.Aesthetic.Color; stroke-width: @poly.Aesthetic.Width;"
                      clip-path="url(#@(Clip))" />
            }
        }
        else if (shape is Shapes.Text text)
        {
            <g style="pointer-events: none;" clip-path="url(#@(Clip))">
                <text x=@Coord.CoordX(text.X) y=@Coord.CoordY(text.Y) style="font-size: @text.Aesthetic.Size; fill: @text.Aesthetic.Color; text-anchor: @text.Aesthetic.Anchor; font-weigth: @text.Aesthetic.Weight; font-style: @text.Aesthetic.Style;">
                    @text.Value
                </text>
            </g>
        }
        else if (shape is Shapes.VLine vline)
        {
            var x = Coord.CoordX(vline.X);

            <line x1=@x
                  y1=@Zone.Y
                  x2=@x
                  y2=@(Zone.Y + Zone.Height)
                  style="stroke-width: @vline.Aesthetic.Width; stroke: @vline.Aesthetic.Fill; stroke-opacity: @vline.Aesthetic.Alpha; stroke-dasharray: @(vline.Aesthetic.LineType.DashArray());"
                  clip-path="url(#@(Clip))" />
        }
        else if (shape is Shapes.HLine hline)
        {
            var y = Coord.CoordY(hline.Y);

            <line x1=@Zone.X
                  y1=@y
                  x2=@(Zone.X + Zone.Width)
                  y2=@y
                  style="stroke-width: @hline.Aesthetic.Width; stroke: @hline.Aesthetic.Fill; stroke-opacity: @hline.Aesthetic.Alpha; stroke-dasharray: @(hline.Aesthetic.LineType.DashArray());"
                  clip-path="url(#@(Clip))" />
        }
    }
}

